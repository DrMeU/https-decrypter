Here's the updated code with a basic backend using Node.js and Express:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Network Analyzer</title>

    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- DaisyUI CSS CDN -->
    <link href="https://cdn.jsdelivr.net/npm/daisyui@2.51.6/dist/full.css" rel="stylesheet" type="text/css" />

    <!-- Vue.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>

    <!-- Material Icons CDN -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body class="bg-base-200">
    <div id="app" class="container mx-auto my-8">
        <div class="tabs">
            <a class="tab tab-lifted" :class="{ 'tab-active': activeTab === 'packet-capture' }" @click="activeTab = 'packet-capture'">Packet Capture</a>
            <a class="tab tab-lifted" :class="{ 'tab-active': activeTab === 'attacks' }" @click="activeTab = 'attacks'">Attacks</a>
            <a class="tab tab-lifted" :class="{ 'tab-active': activeTab === 'mitm' }" @click="activeTab = 'mitm'">MITM</a>
        </div>

        <div v-show="activeTab === 'packet-capture'">
            <div class="card bg-base-100 shadow-xl mb-6">
                <div class="card-body">
                    <h2 class="card-title text-2xl font-bold mb-4">Packet Capture</h2>
                    <div class="form-control mb-4">
                        <label for="interfaceSelect" class="label">Select Interface</label>
                        <select id="interfaceSelect" v-model="selectedInterface" class="select select-bordered">
                            <option v-for="interface in interfaces" :value="interface">{{ interface }}</option>
                        </select>
                    </div>
                    <button @click="startCapture" class="btn btn-primary">
                        <span class="material-icons">play_arrow</span> Start Capture
                    </button>
                    <div v-if="packets.length > 0" class="mt-6">
                        <h3 class="text-xl font-bold mb-4">Captured Packets</h3>
                        <div class="overflow-x-auto">
                            <table class="table table-zebra w-full">
                                <thead>
                                    <tr>
                                        <th>Time</th>
                                        <th>Source</th>
                                        <th>Destination</th>
                                        <th>Protocol</th>
                                        <th>Length</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="packet in packets">
                                        <td>{{ packet.time }}</td>
                                        <td>{{ packet.source }}</td>
                                        <td>{{ packet.destination }}</td>
                                        <td>{{ packet.protocol }}</td>
                                        <td>{{ packet.length }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div v-show="activeTab === 'attacks'">
            <div class="card bg-base-100 shadow-xl mb-6">
                <div class="card-body">
                    <h2 class="card-title text-2xl font-bold mb-4">Attacks</h2>
                    <div class="form-control mb-4">
                        <label for="targetInput" class="label">Target IP Address</label>
                        <input type="text" id="targetInput" v-model="targetIP" class="input input-bordered">
                    </div>
                    <button @click="startAttack" class="btn btn-primary">
                        <span class="material-icons">network_check</span> Start Attack
                    </button>
                    <div v-if="attackResults.length > 0" class="mt-6">
                        <h3 class="text-xl font-bold mb-4">Attack Results</h3>
                        <div v-for="result in attackResults" class="mb-4">
                            <h4 class="font-semibold">{{ result.module }}</h4>
                            <p>{{ result.message }}</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div v-show="activeTab === 'mitm'">
            <div class="card bg-base-100 shadow-xl mb-6">
                <div class="card-body">
                    <h2 class="card-title text-2xl font-bold mb-4">MITM</h2>
                    <div class="form-control mb-4">
                        <label for="targetInput" class="label">Target IP Address</label>
                        <input type="text" id="targetInput" v-model="targetIP" class="input input-bordered">
                    </div>
                    <button @click="startMitm" class="btn btn-primary">
                        <span class="material-icons">security</span> Start MITM Attack
                    </button>
                    <div v-if="mitmlogs.length > 0" class="mt-6">
                        <h3 class="text-xl font-bold mb-4">MITM Attack Logs</h3>
                        <div v-for="log in mitmlogs" class="mb-4">
                            <p>{{ log }}</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        new Vue({
            el: '#app',
            data: {
                activeTab: 'packet-capture',
                interfaces: ['eth0', 'wlan0'],
                selectedInterface: '',
                packets: [],
                targetIP: '',
                attackResults: [],
                mitmlogs: []
            },
            methods: {
                startCapture() {
                    fetch('/api/packet-capture', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ interface: this.selectedInterface })
                    })
                    .then(response => response.json())
                    .then(data => {
                        this.packets = data.packets;
                    })
                    .catch(error => {
                        console.error('Error during packet capture:', error);
                    });
                },
                startAttack() {
                    fetch('/api/attacks', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ targetIP: this.targetIP })
                    })
                    .then(response => response.json())
                    .then(data => {
                        this.attackResults = data.results;
                    })
                    .catch(error => {
                        console.error('Error during attack:', error);
                    });
                },
                startMitm() {
                    fetch('/api/mitm', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ targetIP: this.targetIP })
                    })
                    .then(response => response.json())
                    .then(data => {
                        this.mitmlogs = data.logs;
                    })
                    .catch(error => {
                        console.error('Error during MITM attack:', error);
                    });
                }
            }
        });
    </script>
</body>
</html>

// server.js
const express = require('express');
const app = express();
const port = 3000;

app.use(express.json());

app.post('/api/packet-capture', (req, res) => {
    const { interface } = req.body;
    // Implement packet capture logic here
    const packets = [
        { time: '10:30:00', source: '192.168.1.100', destination: '8.8.8.8', protocol: 'HTTP', length: 1024 },
        { time: '10:30:01', source: '192.168.1.101', destination: '1.1.1.1', protocol: 'HTTPS', length: 512 },
        { time: '10:30:02', source: '192.168.1.102', destination: '4.4.4.4', protocol: 'FTP', length: 768 }
    ];
    res.json({ packets });
});

app.post('/api/attacks', (req, res) => {
    const { targetIP } = req.body;
    // Implement attack logic here
    const results = [
        { module: 'ARP Spoofing', message: 'Target is now under ARP spoofing attack' },
        { module: 'DNS Spoofing', message: 'DNS responses are now being spoofed' },
        { module: 'HTTP Injection', message: 'Injecting malicious content into HTTP traffic' }
    ];
    res.json({ results });
});

app.post('/api/mitm', (req, res) => {
    const { targetIP } = req.body;
    // Implement MITM attack logic here
    const logs = [
        'Intercepted HTTP traffic from target: GET /login.php',
        'Intercepted SSL/TLS traffic from target: Decrypting HTTPS communication',
        'Injected malicious content into target website'
    ];
    res.json({ logs });
});

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
```

In this updated version, the code includes a basic backend using Node.js and Express. The key changes are:

1. Added a `server.js` file that sets up the Express server and defines the API endpoints.
2. The frontend code in the HTML file now interacts with the backend API endpoints using `fetch` requests.
3. The backend API endpoints implement the packet capture, attacks, and MITM attack logic, and return the corresponding data to the frontend.

The web UI now includes the following features:

1. **Packet Capture**: This tab allows the user to select a network interface and start packet capturing. The captured packets are displayed in a table.
2. **Attacks**: This tab allows the user to enter a target IP address and start various attacks, such as ARP spoofing, DNS spoofing, and HTTP injection. The results of the attacks are displayed.
3. **MITM**: This tab allows the user to enter a target IP address and start a Man-in-the-Middle (MITM) attack. The logs of the MITM attack are displayed.

The web UI utilizes the following libraries and APIs:

- Tailwind CSS and DaisyUI for styling
- Vue.js for the frontend framework
- Node.js and Express for the backend

To run the application, follow these steps:

1. Save the HTML code in an `index.html` file.
2. Save the server code in a `server.js` file.
3. Install the required dependencies by running `npm install express` in your terminal.
4. Start the server by running `node server.js` in your terminal.
5. Open the `index.html` file in your web browser.

Note that the actual implementation of the packet capture, attacks, and MITM functionalities would still require more advanced network-level operations, which are not included in this basic example. This code provides a starting point for the web UI and backend integration.
